format_version: 1.2.0
default_step_lib_source: https://github.com/leftshifters/bitrise-steplib.git

title: Build script for Android

app:
  envs:
  #- branch_to_build: ""
  #- package: ""
  #- mainActivity: ""
  - debug: "1"
  - emulator_name: "Nexus_5_API_22"
  
workflows:

  devices:
    steps:
    - script:
        title: devices-connected-to-machine
        inputs:
        - content: |-
            #!/bin/bash

            set -e

            if [ ${debug} == "1" ];then
              set -v
            fi

            adb -d shell input keyevent 82 # Used to unlock the device
            DEVICES_FOUND=$(adb devices | grep -v "List of devices attached" | grep -v emulator -c)
            let DEVICES_FOUND=DEVICES_FOUND-1;
            echo Number of devices available : $DEVICES_FOUND

  emulator:
    steps:
    - script:
        title: start-emulator
        is_skippable: false
        inputs:
        - content: |-
            #!/bin/bash

            #set -e

            if [ ${debug} == "1" ];then
              set -v
            fi

            # TODO : Create an emulator if one doesn't exist
            # - adb shell input keyevent 82
            # - ./gradlew connectedCheck

            # https://devmaze.wordpress.com/2011/12/12/starting-and-stopping-android-emulators/
            # adb shell getprop init.svc.bootanim

            # Check if a process which calls itself the emulator is running
            # TODO : may check this using ADB Devices
            # TODO : Gets fucked up when adb fucks up, keeps ranting multiple devices found (not the exact message)
            OUTPUT=$(ps -aef | grep emulator | grep "sdk/tools" -c)
            # If 0 processes are called emulator, it means we need to load up one
            if [ "$OUTPUT" == "0" ]; then
              EMULATOR_RESULTS=$(nohup $ANDROID_HOME/tools/emulator -avd ${emulator_name} 2>emulator.log 1>emulator.log &)
              # This is a big #HACK, only errors are returned in the first two seconds, I suck
              sleep 2
              EMULATOR_RESULTS=$(<emulator.log)
              
              if [ $(echo $EMULATOR_RESULTS | grep "PANIC" | wc -l) == "1" ]; then
                echo $EMULATOR_RESULTS | grep "PANIC"
                exit 1
              else 
                if [ $(echo $EMULATOR_RESULTS | grep "ERROR" | wc -l) == "1" ]; then
                  echo $EMULATOR_RESULTS | grep "ERROR"
                  exit 1
                else
                  echo Loading the emulator
                  adb wait-for-device
                  SCREEN_LOADING=$(adb shell getprop sys.boot_completed | tr -d '\r')
                  while [ "$SCREEN_LOADING" != "1" ]; do
                    sleep 2
                    SCREEN_LOADING=$(adb shell getprop sys.boot_completed | tr -d '\r')
                  done
                  adb shell input keyevent 82 # Used to unlock the device
                fi
              fi
            else
              echo The emulator is already running
            fi

  git-pull-latest:
    steps:
    - script:
        title: pull-latest
        inputs:
        - content: |-
            #!/bin/bash

            set -e
            set -v

            echo Pulling branch ${branch_to_build}
            git pull origin $branch_to_build

  assemble-fast:
    before_run:
    - git-pull-latest
    steps:
    - script:
        title: assemble
        inputs:
        - content: |-
            #!/bin/bash

            set -e

            if [ ${debug} == "1" ];then
              set -v
            fi

            TIMESHTAMP=$(date +%Y%m%d%H%M%S)

            ./gradlew assembleDebug --stacktrace 2>&1 | tee gradle-assemble-$TIMESHTAMP.log

            BUILD_RESULTS=$(<gradle-assemble-$TIMESHTAMP.log)
            BUILD_SUCCESSFUL=$(echo $BUILD_RESULTS | grep "BUILD SUCCESSFUL" -c)
            echo $BUILD_SUCCESSFUL;

            if [ $BUILD_SUCCESSFUL != "1" ]; then
              exit 1
            fi

  assemble:
    before_run:
    - git-pull-latest
    steps:
    - script:
        title: assemble
        inputs:
        - content: |-
            #!/bin/bash

            set -e

            if [ ${debug} == "1" ];then
              set -v
            fi

            TIMESHTAMP=$(date +%Y%m%d%H%M%S)

            # TODO : Add the project name to the logfile and move it to a common location on the server
            # TODO : Use the logs to show details on a screen somewhere
            ./gradlew clean 2>&1 | tee gradle-clean-$TIMESHTAMP.log 
            ./gradlew assembleDebug --stacktrace 2>&1 | tee gradle-assemble-$TIMESHTAMP.log

            BUILD_RESULTS=$(<gradle-assemble-$TIMESHTAMP.log)
            BUILD_SUCCESSFUL=$(echo $BUILD_RESULTS | grep "BUILD SUCCESSFUL" -c)
            echo $BUILD_SUCCESSFUL;

            if [ $BUILD_SUCCESSFUL != "1" ]; then
              exit 1
            fi

  install:
    before_run:
    - emulator
    - git-pull-latest    
    steps:
    - script:
        title: install on emulator
        inputs:
        - content: |-
            #!/bin/bash

            set -e

            if [ ${debug} == "1" ];then
              set -v
            fi

            TIMESHTAMP=$(date +%Y%m%d%H%M%S)

            ./gradlew clean 2>&1 | tee gradle-clean-$TIMESHTAMP.log 
            ./gradlew uninstallAll 2>&1 | tee gradle-uninstall-$TIMESHTAMP.log

            ./gradlew installDebug --stacktrace 2>&1 | tee gradle-assemble-$TIMESHTAMP.log

            BUILD_RESULTS=$(<gradle-assemble-$TIMESHTAMP.log)
            BUILD_SUCCESSFUL=$(echo $BUILD_RESULTS | grep "BUILD SUCCESSFUL" -c)
            echo $BUILD_SUCCESSFUL;

            if [ $BUILD_SUCCESSFUL != "1" ]; then
              exit 1
            else
              # TODO : Someday figure out how to get these automatically
              if [ "${package}" != "" ];then
                echo Package name found ${package}
                if [ "${mainActivity}" != "" ]; then
                  echo Main activity found ${mainActivity}
                  adb shell am start -n ${package}/${package}.${mainActivity}
                else
                  echo Main Activity not found
                fi
              else
                echo Package name not found
              fi
            fi
